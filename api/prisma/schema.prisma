generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model UserDebt {
  id         Int      @id @default(autoincrement())
  amount     Float
  debtorId   Int
  creditorId Int
  debtor     User     @relation("Debtor", fields: [debtorId], references: [id])
  creditor   User     @relation("Creditor", fields: [creditorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id               Int            @id @default(autoincrement())
  username         String         @unique
  email            String         @unique
  password         String
  balance          Float          @default(0)
  debtOwedToUser   Float          @default(0)
  debtOwedByUser   Float          @default(0)
  transactions     Transaction[]
  budgets          Budget[]
  groups           Group[]
  friends          Friend[]
  customCategories UserCategory[]
  userDebtor       UserDebt[]     @relation("Debtor")
  userCreditor     UserDebt[]     @relation("Creditor")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Transaction {
  id             Int           @id @default(autoincrement())
  title          String
  amount         Float
  description    String?
  date           DateTime
  categoryId     Int
  userId         Int
  friendId       Int
  userCategoryId Int?
  category       Category      @relation(fields: [categoryId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  friend         Friend?       @relation(fields: [friendId], references: [id])
  UserCategory   UserCategory? @relation(fields: [userCategoryId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Budget {
  id         Int      @id @default(autoincrement())
  limit      Float
  userId     Int
  categoryId Int
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  inviteToken String?
  members     User[]
  friends     Friend[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Friend {
  id           Int           @id @default(autoincrement())
  name         String
  userId       Int
  groupId      Int
  user         User          @relation(fields: [userId], references: [id])
  group        Group         @relation(fields: [groupId], references: [id])
  debtToFriend Float         @default(0)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Category {
  id           Int           @id @default(autoincrement())
  title        String
  imageUrl     String
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserCategory {
  id           Int           @id @default(autoincrement())
  title        String
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
